/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * Navtrack.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  AssetsModel,
  ProblemDetails,
  AssetModel,
  ErrorModel,
  AddAssetModel,
  UpdateAssetModel,
  LocationListModel,
  GetAssetsAssetIdLocationsParams,
  AssetUserListModel,
  AddUserToAssetModel,
  TripListModel,
  GetAssetsAssetIdTripsParams,
  GetAssetsAssetIdReportsTimeDistanceParams,
  DevicesModel,
  AddDeviceModel,
  DeviceTypesModel,
  GetEnvironment200,
  ProtocolsModel,
  GetSettings200,
  CurrentUserModel,
  RegisterAccountRequest,
  UpdateUserRequest,
  ChangePasswordRequest,
  ResetPasswordRequest,
  ForgotPasswordRequest
} from './model/generated'
import { authAxiosInstance } from './authAxiosInstance';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


export const getAssets = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<AssetsModel>(
      {url: `/assets`, method: 'get', signal
    },
      );
    }
  

export const getGetAssetsQueryKey = () => [`/assets`] as const;
  

    
export const getGetAssetsQueryOptions = <TData = Awaited<ReturnType<typeof getAssets>>, TError = ProblemDetails>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssets>>> = ({ signal }) => getAssets(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAssetsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssets>>>
export type GetAssetsQueryError = ProblemDetails

export const useGetAssets = <TData = Awaited<ReturnType<typeof getAssets>>, TError = ProblemDetails>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postAssets = (
    addAssetModel: AddAssetModel,
 ) => {
      return authAxiosInstance<AssetModel>(
      {url: `/assets`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addAssetModel
    },
      );
    }
  


export const getPostAssetsMutationOptions = <TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssets>>, TError,{data: AddAssetModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAssets>>, TError,{data: AddAssetModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAssets>>, {data: AddAssetModel}> = (props) => {
          const {data} = props ?? {};

          return  postAssets(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAssetsMutationResult = NonNullable<Awaited<ReturnType<typeof postAssets>>>
    export type PostAssetsMutationBody = AddAssetModel
    export type PostAssetsMutationError = ErrorModel

    export const usePostAssets = <TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssets>>, TError,{data: AddAssetModel}, TContext>, }
) => {
    
      const mutationOptions = getPostAssetsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getAssetsAssetId = (
    assetId: string,
 signal?: AbortSignal
) => {
      return authAxiosInstance<AssetModel>(
      {url: `/assets/${assetId}`, method: 'get', signal
    },
      );
    }
  

export const getGetAssetsAssetIdQueryKey = (assetId: string,) => [`/assets/${assetId}`] as const;
  

    
export const getGetAssetsAssetIdQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsAssetId>>, TError = ProblemDetails>(assetId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsAssetIdQueryKey(assetId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsAssetId>>> = ({ signal }) => getAssetsAssetId(assetId, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions}}

export type GetAssetsAssetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsAssetId>>>
export type GetAssetsAssetIdQueryError = ProblemDetails

export const useGetAssetsAssetId = <TData = Awaited<ReturnType<typeof getAssetsAssetId>>, TError = ProblemDetails>(
 assetId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsAssetIdQueryOptions(assetId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const patchAssetsAssetId = (
    assetId: string,
    updateAssetModel: UpdateAssetModel,
 ) => {
      return authAxiosInstance<void>(
      {url: `/assets/${assetId}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: updateAssetModel
    },
      );
    }
  


export const getPatchAssetsAssetIdMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetsAssetId>>, TError,{assetId: string;data: UpdateAssetModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetsAssetId>>, TError,{assetId: string;data: UpdateAssetModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetsAssetId>>, {assetId: string;data: UpdateAssetModel}> = (props) => {
          const {assetId,data} = props ?? {};

          return  patchAssetsAssetId(assetId,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchAssetsAssetIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetsAssetId>>>
    export type PatchAssetsAssetIdMutationBody = UpdateAssetModel
    export type PatchAssetsAssetIdMutationError = ProblemDetails

    export const usePatchAssetsAssetId = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetsAssetId>>, TError,{assetId: string;data: UpdateAssetModel}, TContext>, }
) => {
    
      const mutationOptions = getPatchAssetsAssetIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteAssetsAssetId = (
    assetId: string,
 ) => {
      return authAxiosInstance<void>(
      {url: `/assets/${assetId}`, method: 'delete'
    },
      );
    }
  


export const getDeleteAssetsAssetIdMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetId>>, TError,{assetId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetId>>, TError,{assetId: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAssetsAssetId>>, {assetId: string}> = (props) => {
          const {assetId} = props ?? {};

          return  deleteAssetsAssetId(assetId,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteAssetsAssetIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAssetsAssetId>>>
    
    export type DeleteAssetsAssetIdMutationError = ProblemDetails

    export const useDeleteAssetsAssetId = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetId>>, TError,{assetId: string}, TContext>, }
) => {
    
      const mutationOptions = getDeleteAssetsAssetIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getAssetsAssetIdLocations = (
    assetId: string,
    params?: GetAssetsAssetIdLocationsParams,
 signal?: AbortSignal
) => {
      return authAxiosInstance<LocationListModel>(
      {url: `/assets/${assetId}/locations`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetAssetsAssetIdLocationsQueryKey = (assetId: string,
    params?: GetAssetsAssetIdLocationsParams,) => [`/assets/${assetId}/locations`, ...(params ? [params]: [])] as const;
  

    
export const getGetAssetsAssetIdLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsAssetIdLocations>>, TError = ProblemDetails>(assetId: string,
    params?: GetAssetsAssetIdLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdLocations>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdLocations>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsAssetIdLocationsQueryKey(assetId,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsAssetIdLocations>>> = ({ signal }) => getAssetsAssetIdLocations(assetId,params, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions}}

export type GetAssetsAssetIdLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsAssetIdLocations>>>
export type GetAssetsAssetIdLocationsQueryError = ProblemDetails

export const useGetAssetsAssetIdLocations = <TData = Awaited<ReturnType<typeof getAssetsAssetIdLocations>>, TError = ProblemDetails>(
 assetId: string,
    params?: GetAssetsAssetIdLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsAssetIdLocationsQueryOptions(assetId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getAssetsAssetIdUsers = (
    assetId: string,
 signal?: AbortSignal
) => {
      return authAxiosInstance<AssetUserListModel>(
      {url: `/assets/${assetId}/users`, method: 'get', signal
    },
      );
    }
  

export const getGetAssetsAssetIdUsersQueryKey = (assetId: string,) => [`/assets/${assetId}/users`] as const;
  

    
export const getGetAssetsAssetIdUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsAssetIdUsers>>, TError = ProblemDetails>(assetId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdUsers>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdUsers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsAssetIdUsersQueryKey(assetId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsAssetIdUsers>>> = ({ signal }) => getAssetsAssetIdUsers(assetId, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions}}

export type GetAssetsAssetIdUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsAssetIdUsers>>>
export type GetAssetsAssetIdUsersQueryError = ProblemDetails

export const useGetAssetsAssetIdUsers = <TData = Awaited<ReturnType<typeof getAssetsAssetIdUsers>>, TError = ProblemDetails>(
 assetId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdUsers>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsAssetIdUsersQueryOptions(assetId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postAssetsAssetIdUsers = (
    assetId: string,
    addUserToAssetModel: AddUserToAssetModel,
 ) => {
      return authAxiosInstance<void>(
      {url: `/assets/${assetId}/users`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addUserToAssetModel
    },
      );
    }
  


export const getPostAssetsAssetIdUsersMutationOptions = <TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetsAssetIdUsers>>, TError,{assetId: string;data: AddUserToAssetModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAssetsAssetIdUsers>>, TError,{assetId: string;data: AddUserToAssetModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAssetsAssetIdUsers>>, {assetId: string;data: AddUserToAssetModel}> = (props) => {
          const {assetId,data} = props ?? {};

          return  postAssetsAssetIdUsers(assetId,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAssetsAssetIdUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postAssetsAssetIdUsers>>>
    export type PostAssetsAssetIdUsersMutationBody = AddUserToAssetModel
    export type PostAssetsAssetIdUsersMutationError = ErrorModel

    export const usePostAssetsAssetIdUsers = <TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetsAssetIdUsers>>, TError,{assetId: string;data: AddUserToAssetModel}, TContext>, }
) => {
    
      const mutationOptions = getPostAssetsAssetIdUsersMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteAssetsAssetIdUsersUserId = (
    assetId: string,
    userId: string,
 ) => {
      return authAxiosInstance<void>(
      {url: `/assets/${assetId}/users/${userId}`, method: 'delete'
    },
      );
    }
  


export const getDeleteAssetsAssetIdUsersUserIdMutationOptions = <TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetIdUsersUserId>>, TError,{assetId: string;userId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetIdUsersUserId>>, TError,{assetId: string;userId: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAssetsAssetIdUsersUserId>>, {assetId: string;userId: string}> = (props) => {
          const {assetId,userId} = props ?? {};

          return  deleteAssetsAssetIdUsersUserId(assetId,userId,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteAssetsAssetIdUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAssetsAssetIdUsersUserId>>>
    
    export type DeleteAssetsAssetIdUsersUserIdMutationError = ErrorModel

    export const useDeleteAssetsAssetIdUsersUserId = <TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetIdUsersUserId>>, TError,{assetId: string;userId: string}, TContext>, }
) => {
    
      const mutationOptions = getDeleteAssetsAssetIdUsersUserIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getAssetsAssetIdTrips = (
    assetId: string,
    params?: GetAssetsAssetIdTripsParams,
 signal?: AbortSignal
) => {
      return authAxiosInstance<TripListModel>(
      {url: `/assets/${assetId}/trips`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetAssetsAssetIdTripsQueryKey = (assetId: string,
    params?: GetAssetsAssetIdTripsParams,) => [`/assets/${assetId}/trips`, ...(params ? [params]: [])] as const;
  

    
export const getGetAssetsAssetIdTripsQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsAssetIdTrips>>, TError = ProblemDetails>(assetId: string,
    params?: GetAssetsAssetIdTripsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdTrips>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdTrips>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsAssetIdTripsQueryKey(assetId,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsAssetIdTrips>>> = ({ signal }) => getAssetsAssetIdTrips(assetId,params, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions}}

export type GetAssetsAssetIdTripsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsAssetIdTrips>>>
export type GetAssetsAssetIdTripsQueryError = ProblemDetails

export const useGetAssetsAssetIdTrips = <TData = Awaited<ReturnType<typeof getAssetsAssetIdTrips>>, TError = ProblemDetails>(
 assetId: string,
    params?: GetAssetsAssetIdTripsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdTrips>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsAssetIdTripsQueryOptions(assetId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getAssetsAssetIdReportsTimeDistance = (
    assetId: string,
    params?: GetAssetsAssetIdReportsTimeDistanceParams,
 signal?: AbortSignal
) => {
      return authAxiosInstance<TripListModel>(
      {url: `/assets/${assetId}/reports/time-distance`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetAssetsAssetIdReportsTimeDistanceQueryKey = (assetId: string,
    params?: GetAssetsAssetIdReportsTimeDistanceParams,) => [`/assets/${assetId}/reports/time-distance`, ...(params ? [params]: [])] as const;
  

    
export const getGetAssetsAssetIdReportsTimeDistanceQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>, TError = ProblemDetails>(assetId: string,
    params?: GetAssetsAssetIdReportsTimeDistanceParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsAssetIdReportsTimeDistanceQueryKey(assetId,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>> = ({ signal }) => getAssetsAssetIdReportsTimeDistance(assetId,params, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions}}

export type GetAssetsAssetIdReportsTimeDistanceQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>>
export type GetAssetsAssetIdReportsTimeDistanceQueryError = ProblemDetails

export const useGetAssetsAssetIdReportsTimeDistance = <TData = Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>, TError = ProblemDetails>(
 assetId: string,
    params?: GetAssetsAssetIdReportsTimeDistanceParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdReportsTimeDistance>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsAssetIdReportsTimeDistanceQueryOptions(assetId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getAssetsAssetIdDevices = (
    assetId: string,
 signal?: AbortSignal
) => {
      return authAxiosInstance<DevicesModel>(
      {url: `/assets/${assetId}/devices`, method: 'get', signal
    },
      );
    }
  

export const getGetAssetsAssetIdDevicesQueryKey = (assetId: string,) => [`/assets/${assetId}/devices`] as const;
  

    
export const getGetAssetsAssetIdDevicesQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsAssetIdDevices>>, TError = ProblemDetails>(assetId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdDevices>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdDevices>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsAssetIdDevicesQueryKey(assetId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsAssetIdDevices>>> = ({ signal }) => getAssetsAssetIdDevices(assetId, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions}}

export type GetAssetsAssetIdDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsAssetIdDevices>>>
export type GetAssetsAssetIdDevicesQueryError = ProblemDetails

export const useGetAssetsAssetIdDevices = <TData = Awaited<ReturnType<typeof getAssetsAssetIdDevices>>, TError = ProblemDetails>(
 assetId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAssetsAssetIdDevices>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssetsAssetIdDevicesQueryOptions(assetId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postAssetsAssetIdDevices = (
    assetId: string,
    addDeviceModel: AddDeviceModel,
 ) => {
      return authAxiosInstance<void>(
      {url: `/assets/${assetId}/devices`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addDeviceModel
    },
      );
    }
  


export const getPostAssetsAssetIdDevicesMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetsAssetIdDevices>>, TError,{assetId: string;data: AddDeviceModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAssetsAssetIdDevices>>, TError,{assetId: string;data: AddDeviceModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAssetsAssetIdDevices>>, {assetId: string;data: AddDeviceModel}> = (props) => {
          const {assetId,data} = props ?? {};

          return  postAssetsAssetIdDevices(assetId,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAssetsAssetIdDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof postAssetsAssetIdDevices>>>
    export type PostAssetsAssetIdDevicesMutationBody = AddDeviceModel
    export type PostAssetsAssetIdDevicesMutationError = ProblemDetails

    export const usePostAssetsAssetIdDevices = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetsAssetIdDevices>>, TError,{assetId: string;data: AddDeviceModel}, TContext>, }
) => {
    
      const mutationOptions = getPostAssetsAssetIdDevicesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteAssetsAssetIdDevicesDeviceId = (
    assetId: string,
    deviceId: string,
 ) => {
      return authAxiosInstance<void>(
      {url: `/assets/${assetId}/devices/${deviceId}`, method: 'delete'
    },
      );
    }
  


export const getDeleteAssetsAssetIdDevicesDeviceIdMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetIdDevicesDeviceId>>, TError,{assetId: string;deviceId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetIdDevicesDeviceId>>, TError,{assetId: string;deviceId: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAssetsAssetIdDevicesDeviceId>>, {assetId: string;deviceId: string}> = (props) => {
          const {assetId,deviceId} = props ?? {};

          return  deleteAssetsAssetIdDevicesDeviceId(assetId,deviceId,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteAssetsAssetIdDevicesDeviceIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAssetsAssetIdDevicesDeviceId>>>
    
    export type DeleteAssetsAssetIdDevicesDeviceIdMutationError = ProblemDetails

    export const useDeleteAssetsAssetIdDevicesDeviceId = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsAssetIdDevicesDeviceId>>, TError,{assetId: string;deviceId: string}, TContext>, }
) => {
    
      const mutationOptions = getDeleteAssetsAssetIdDevicesDeviceIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getDevicesTypes = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<DeviceTypesModel>(
      {url: `/devices/types`, method: 'get', signal
    },
      );
    }
  

export const getGetDevicesTypesQueryKey = () => [`/devices/types`] as const;
  

    
export const getGetDevicesTypesQueryOptions = <TData = Awaited<ReturnType<typeof getDevicesTypes>>, TError = ProblemDetails>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDevicesTypes>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getDevicesTypes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDevicesTypesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDevicesTypes>>> = ({ signal }) => getDevicesTypes(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetDevicesTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getDevicesTypes>>>
export type GetDevicesTypesQueryError = ProblemDetails

export const useGetDevicesTypes = <TData = Awaited<ReturnType<typeof getDevicesTypes>>, TError = ProblemDetails>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDevicesTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDevicesTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getEnvironment = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<GetEnvironment200>(
      {url: `/environment`, method: 'get', signal
    },
      );
    }
  

export const getGetEnvironmentQueryKey = () => [`/environment`] as const;
  

    
export const getGetEnvironmentQueryOptions = <TData = Awaited<ReturnType<typeof getEnvironment>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getEnvironment>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getEnvironment>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEnvironmentQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnvironment>>> = ({ signal }) => getEnvironment(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetEnvironmentQueryResult = NonNullable<Awaited<ReturnType<typeof getEnvironment>>>
export type GetEnvironmentQueryError = unknown

export const useGetEnvironment = <TData = Awaited<ReturnType<typeof getEnvironment>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getEnvironment>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEnvironmentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getHealth = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<void>(
      {url: `/health`, method: 'get', signal
    },
      );
    }
  

export const getGetHealthQueryKey = () => [`/health`] as const;
  

    
export const getGetHealthQueryOptions = <TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthQueryError = unknown

export const useGetHealth = <TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetHealthQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getProtocols = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<ProtocolsModel>(
      {url: `/protocols`, method: 'get', signal
    },
      );
    }
  

export const getGetProtocolsQueryKey = () => [`/protocols`] as const;
  

    
export const getGetProtocolsQueryOptions = <TData = Awaited<ReturnType<typeof getProtocols>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProtocols>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getProtocols>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProtocolsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProtocols>>> = ({ signal }) => getProtocols(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetProtocolsQueryResult = NonNullable<Awaited<ReturnType<typeof getProtocols>>>
export type GetProtocolsQueryError = unknown

export const useGetProtocols = <TData = Awaited<ReturnType<typeof getProtocols>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProtocols>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProtocolsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getSettings = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<GetSettings200>(
      {url: `/settings`, method: 'get', signal
    },
      );
    }
  

export const getGetSettingsQueryKey = () => [`/settings`] as const;
  

    
export const getGetSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getSettings>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSettingsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSettings>>> = ({ signal }) => getSettings(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getSettings>>>
export type GetSettingsQueryError = unknown

export const useGetSettings = <TData = Awaited<ReturnType<typeof getSettings>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSettingsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getUser = (
    
 signal?: AbortSignal
) => {
      return authAxiosInstance<CurrentUserModel>(
      {url: `/user`, method: 'get', signal
    },
      );
    }
  

export const getGetUserQueryKey = () => [`/user`] as const;
  

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = ProblemDetails>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = ProblemDetails

export const useGetUser = <TData = Awaited<ReturnType<typeof getUser>>, TError = ProblemDetails>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postUser = (
    registerAccountRequest: RegisterAccountRequest,
 ) => {
      return authAxiosInstance<void>(
      {url: `/user`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: registerAccountRequest
    },
      );
    }
  


export const getPostUserMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: RegisterAccountRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: RegisterAccountRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUser>>, {data: RegisterAccountRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUser(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUserMutationResult = NonNullable<Awaited<ReturnType<typeof postUser>>>
    export type PostUserMutationBody = RegisterAccountRequest
    export type PostUserMutationError = ProblemDetails

    export const usePostUser = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: RegisterAccountRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const patchUser = (
    updateUserRequest: UpdateUserRequest,
 ) => {
      return authAxiosInstance<CurrentUserModel>(
      {url: `/user`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequest
    },
      );
    }
  


export const getPatchUserMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUser>>, TError,{data: UpdateUserRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchUser>>, TError,{data: UpdateUserRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchUser>>, {data: UpdateUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  patchUser(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchUserMutationResult = NonNullable<Awaited<ReturnType<typeof patchUser>>>
    export type PatchUserMutationBody = UpdateUserRequest
    export type PatchUserMutationError = ProblemDetails

    export const usePatchUser = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUser>>, TError,{data: UpdateUserRequest}, TContext>, }
) => {
    
      const mutationOptions = getPatchUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postUserPasswordChange = (
    changePasswordRequest: ChangePasswordRequest,
 ) => {
      return authAxiosInstance<void>(
      {url: `/user/password/change`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordRequest
    },
      );
    }
  


export const getPostUserPasswordChangeMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordChange>>, TError,{data: ChangePasswordRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordChange>>, TError,{data: ChangePasswordRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserPasswordChange>>, {data: ChangePasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserPasswordChange(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUserPasswordChangeMutationResult = NonNullable<Awaited<ReturnType<typeof postUserPasswordChange>>>
    export type PostUserPasswordChangeMutationBody = ChangePasswordRequest
    export type PostUserPasswordChangeMutationError = ProblemDetails

    export const usePostUserPasswordChange = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordChange>>, TError,{data: ChangePasswordRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostUserPasswordChangeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postUserPasswordReset = (
    resetPasswordRequest: ResetPasswordRequest,
 ) => {
      return authAxiosInstance<void>(
      {url: `/user/password/reset`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequest
    },
      );
    }
  


export const getPostUserPasswordResetMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordReset>>, TError,{data: ResetPasswordRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordReset>>, TError,{data: ResetPasswordRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserPasswordReset>>, {data: ResetPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserPasswordReset(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUserPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof postUserPasswordReset>>>
    export type PostUserPasswordResetMutationBody = ResetPasswordRequest
    export type PostUserPasswordResetMutationError = ProblemDetails

    export const usePostUserPasswordReset = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordReset>>, TError,{data: ResetPasswordRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostUserPasswordResetMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postUserPasswordForgot = (
    forgotPasswordRequest: ForgotPasswordRequest,
 ) => {
      return authAxiosInstance<void>(
      {url: `/user/password/forgot`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordRequest
    },
      );
    }
  


export const getPostUserPasswordForgotMutationOptions = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordForgot>>, TError,{data: ForgotPasswordRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordForgot>>, TError,{data: ForgotPasswordRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserPasswordForgot>>, {data: ForgotPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postUserPasswordForgot(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUserPasswordForgotMutationResult = NonNullable<Awaited<ReturnType<typeof postUserPasswordForgot>>>
    export type PostUserPasswordForgotMutationBody = ForgotPasswordRequest
    export type PostUserPasswordForgotMutationError = ProblemDetails

    export const usePostUserPasswordForgot = <TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPasswordForgot>>, TError,{data: ForgotPasswordRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostUserPasswordForgotMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
